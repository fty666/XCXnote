1，写入Html输出	document.write();
   document.write("<h1>This is a heading</h1>");
2,动态改变Html内容innerHTML，可以使用\进行换行
	x=document.getElementById("demo")  //查找元素
	x.innerHTML="Hello JavaScript";    //改变内容
3，javaScript的编写需要在<script></script>标签内编写
4,变量类型，定义变量var定义
	var x= 'sasaa';  			字符串
	var x=6;					数字
	var x						undefined
	var x=true					布尔型
	var x=new array();			数组
	var x={name:'fty'}			对象
	var x=null;					null
5,循环语句中Continue表示跳过这一个，然后执行下一个

DOM操作
	var x =document.getElementById(id)  		根据id名获取元素节点
	var y=x.getElementsByTagName("p");			根据标签名查找，根据查找的id获取该元素下的所有p标签
	
	document.getElementById("image").src="landscape.jpg";			改变 HTML 元素的属性
	document.getElementById("p2").style.color="blue";				改变HTML css属性
	
事件
	页面事件：
	onload="fun()";				用户进入时会触发
	onunload="fun()";			用户离开时触发
	onchange="fun()";			当内容发生改变时
	鼠标事件：
	onmouseover="fun()"			当鼠标移动上去时触发
	onmouseout="fun()"			当鼠标离开时触发
	
	onmousedown="fun()"			当鼠标点击时会触发
	onmouseup="fun()"			当鼠标点击离开时触发
	
	创建新元素：
	var para=document.createElement("p");					创建新的标签元素
	var node=document.createTextNode("这是新段落。");		写入该标签内的内容
	para.appendChild(node);									追加新的文本节点
	
	删除元素：
	var parent=document.getElementById("div1");
	var child=document.getElementById("p1");
	parent.removeChild(child);
	
	parentNode获取子元素的父元素：
	var child=document.getElementById("p1");
	child.parentNode.removeChild(child);
	
	监听浏览器页面变化事件resize
	$(window).on("resize",function{
	});
	
	触发某个节点上的事件trigger
	$(window).trigger('resize');
	
	
	
	
6，Date日期，获取时间
	var myDate=new Date() 				获取当前的时间
	myDate.setFullYear(2008,7,9)		给日期对象设置一个固定的日期
	getDate()							返回当前月中的某一天1-31
	getDay()							返回星期几0-6
	getMonth()							返回月份0-11
	getFullYear()						返回4位数年份如，2018
	getHours()							返回小时数，0-23
	getMinutes()						返回对象的分钟数0-59
	getSeconds()						返回对象的秒数0-59
	
7，数组
	for(x in arr){arr[x]}				循环数组
	arr1.concat.arr2 【concat】			合并数组
	arr.join(".")	【join】			将数组组成字符串
	arr.sort()							对数组进行排序

8,算数
	math.round()						四舍五入
	math.ceil()							对数进行上舍入
	math.floor()						对数进行下舍入
	math.random()						0到1之间的随机数
	math.max()							返回最大的数
	math.min()							返回最小的数
	
BOM操作   window操作
	window.history						浏览器的历史
	history.back()						后退浏览器
	history.forward()					前进浏览器
	
	alert("文本")						提示文本框
	confirm("文本")						确认框
	prompt('文本','默认值')				提示框
	
	
	
1，改变css样式,获取元素
	x=doucment.getElementById('demo');
	x.style.color="red";
2，onload()事件，当用户进入页面时加载
3，onunload()事件,当用户离开页面时触发
4，onchange()事件，input框内的值发生改变时触发
5，onmouseover()，鼠标移动到时触发
	<div onmouseover="fun()"></div>
6,onmouseout(),鼠标离开时触发
	<div onmouseout="fun()"></div>
7,onmousedown(),鼠标点击时触发
	<div onmouseout="fun()"></div>
8,onmouseup(),鼠标离开时触发
	<div onmouseup="fun()"></div>

9,document元素监听事件，addEventListener()，监听页面标签属性	
	<div id="docu"></div>
	var docu=doucment.getElementById('docu');
	docu.addEventListener('click',fun())    //监听如果点击时触发什么事件
10，window浏览器监听事件，addEventListener(),监听浏览器属性
		window.addEventListener('name',function(){
			浏览器打开或刷新要触发的内容
		})
11,移除监听的事件，removeEventListener
		doucment.getElementById('id').removeEventListener('mousemove',fun)
12,创建一个新的元素，createElement();  添加新的元素：appendChild();  将元素添加到最前面insertBefore()；  移除已存在的元素：removeChild();   
		var p=doucment.createElement('p');//创建一个新的元素标签
		var node=doucment.createTextNode('这是一个新的段落'); //为新建的元素添加文本
		p.appendChild(node);  //将文本添加到新的元素
		
		var elem=document.getElementById('elem');
		elem.insertBefore('p添加的','elem谁前面');
		
13,获取同一属性元素的集合，collection,
		var myCollection = document.getElementsByTagName("p");
		var i;
		for (i = 0; i < myCollection.length; i++) {
			myCollection[i].style.backgroundColor = "red";
		}
14，获取同一属性的元素标签，querySelectorAll('标签')
	var myNodelist = document.querySelectorAll("p");
	var i;
	for (i = 0; i < myNodelist.length; i++) {
		myNodelist[i].style.backgroundColor = "red";
	}
	
		
	
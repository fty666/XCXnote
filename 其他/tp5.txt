安装：git clone https://github.com/top-think/think tp5
目录中：git clone https://github.com/top-think/framework thinkphp


1,模块名小写，类名大写
2，命名空间 namespace： app/模块名/类名   
   类名中：class '定义的与外部类名名称一样'{}
3，配置url     C:\Windows\System32\drivers\etc
<VirtualHost *:80>
    DocumentRoot "G:\xampp\htdocs"
	ServerName localhost
</VirtualHost>

<VirtualHost *:80>
    DocumentRoot "G:\xampp\htdocs\tp5\public"
	ServerName xx.cn
</VirtualHost>
4,访问url，三种path_info,混合，路由，  在config中配置
  path_info形式： http://xx.cn/index/Index/index
				  虚拟域名/模块名/类名/类
  路由：
		use think\Route     //引入Route类
		Route::rule('路由表达式','路由地址','请求类型（get,post,put,delete,any(*)）','路由参数 [文档见]','变量规则[数组]')
		
		Route::get('访问名/:参数名?传递参数=参数','模块名/控制器名（类名）/方法名')
		Route::get('user/user', 'index【application下的命名模块】/User【控制器名】/index【调用的方法】');
  获取客户端传来的参数： 
		use think\Request;
		
		原写法：
			获取单个参数：Request::instance()->param('$name')
			获取url?之后的参数：Request::instance()->get()
			获取url中的参数：Request::instance()->route()
			获取post中的参数：Request::instance()->post()
		简写1：
		public function(Request $request){
			获取所有参数：$request->param()  
		}
		简写2：获取所有的 input('param.')
5,参数验证  validate ：  
	1,独立验证： 
			   use think\Validate
			   $data=['name' => '传递的参数','email'=>'验证的参数'];
			   $validate =new Validate([
					'name'=>'require|max:10',   //验证规则
					'email'=>'email'            //tp5自带的验证规则
			   ])
			   $res=$validate->batch()->check($data);  //进行验证，批量验证batch()
			   var_dump($validate->getError());
			  
	【验证规则：require    			必须的，
				max:25				不能超过25个字符
				between:1,200		只能在1到200之间
				notBetween:1,10		不能在1到10				
				email				邮箱格式
				integer				是否是整数
				float				浮点数字
				boolean				布尔型
				alpha				判断是否是纯字母
				mobile				判断有效手机号
				idCard				判断身份证格式
				'name'=>'length:4,10'		判断字段的值在4到10之间
				'zip'=>'\d{6}'		正则验证
				
	 】
	
	2,验证器：继承  Validate
		class TextValidate extends Validate{
			protected $rule=[ //验证规则   ，固定数组形式
					'name'=>'require|max:10|isYanzhen',  
					'email'=>'email'  
			]
		}
		自定义验证规则：
			protected function isYanzhen($value,$rule='',$data='',$field=''){
				if($value){
				}else{
				}
			}
			
		使用：   $validate=new TextValidate();
				 $res=$validate->batch()->check($data);  //进行验证
	
6，抛异常   try{}catch(Exception $ex){}

7,数据库连接,在databases.php 添加配置：      json_encode($data)    返回json数组形式
	原生的查询：   use think\Db
				   DB::query('select * from 表名 where 查询的条件=?',[$id]);
	
	使用构建器：	Db::table('表名')->where('字段名'，'表达式[= < > ...]'，'查询的条件')->find()    返回一条
																		 ->select()   返回所有
					Db::table('data')->data(['name'=>'tp','score'=>1000])->insert();     添加
					Db::table('think_user')->where('id', 1)->update(['name' => 'thinkphp']);   修改
					Db::table('think_user')->where('id',1)->delete();					删除
					Db::table('think_user')->fetchSql()->where('id',1)->delete();	   fetchSql()显示sql语句 	
				在配置中打开日志sql记录，
	
	模型ROM：数据库表的映射model	继承   extends Model     快速创建模型： php think make:model api/Banner    （哪个模块/模型名）
			
				使用：  模型::get($id)
				
				新增：   $user = new User;
						 $user->data([
							'name'  =>  'thinkphp',
							'email' =>  'thinkphp@qq.com'
						 ]);
						 $user->save();   //批量新增
						 
						$user->name     = 'onethink';
						$user->email    = 'onethink@qq.com';
						$user->isUpdate(false)->save();// 第二次开始必须使用下面的方式新增
						
						$list = [
							['name'=>'thinkphp','email'=>'thinkphp@qq.com'],
							['name'=>'onethink','email'=>'onethink@qq.com']
						];
						$user->saveAll($list);//一次性添加多条数据
						
				更新：   $user->update(['id' => 1, 'name' => 'thinkphp']);
						 $user->where('id', 1)->update(['name' => 'thinkphp']);
				
				删除：	$user = User::get(1);
						$user->delete();
						
						// 支持批量删除多个数据
						User::destroy('1,2,3');
						
						// 删除状态为0的数据
						User::destroy(['status' => 0]);
						 
						//通过数据库类的查询条件删除
						 User::where('id','>',10)->delete();
				
				查询：
						$user = User::get(1); //取出主键为1的数据
						$user->where('name', 'thinkphp')->find();  // 查询单个数据
						
						User::where('id','>',10)->select();
		聚合：  count  max   min  avg  sum   
					
				$user->where('status','>',0)->count();
				$user->where('status',1)->avg('score');
				
		只读字段，修改：
				protected $readonly = ['name','email'];    设置name email位只读
				$user->name = 'TOPThink';
				$user->email = 'Topthink@gmail.com';
				$user->address = '上海静安区';
				 // 保存更改后的用户数据
				$user->save();  							//保存后只会对address字段进行修改
				
		软删除： use SoftDelete;							//引入SoftDelete使用
				protected $deleteTime = 'delete_time';		//定义$deleteTime属性定义软删除标识
				
				User::destroy(1);		 $user->delete();					//进行软删除
				User::destroy(1,true);	 $user->delete(true);					//真实删除
				//查询不含软删除的数据
				User::withTrashed()->find();
				User::withTrashed()->select();
				//只查询软删除的
				User::onlyTrashed()->find();
				User::onlyTrashed()->select();

///explode(',',$data)拆分成数组
				
8，关联模型     
		一对一：   hasOne  hasOne('关联模型名','外键名','主键名',['模型别名定义'],'join类型');   表中没外键用
					
					return $this->hasOne('Profile')    //对模型Profile进行关联
					
					Profile模型中:
					return $this->hasOne('Profile')->field('id,name,email');   //在Profile模型中按条件field进行查找，返回数据	
					
					belongsTo     $this->belongsTo('关联的模型','外键','当前模型的主键')
		
		一对多：   hasMany()			 hasMany('关联模型的模型名字','外键','当前模型的主键');  表中有外键用
		
		多对多：   belongsToMany         belongsToMany('关联的模型'，'中间表表名','中间表的关联字段1','中间表的关联字段2')
		

9,调用模型下的多个方法：
		模型::width(['方法','方法1.方法2'])->find();
		
10,隐藏不需要的模型字段 
		toArray()  转化为数组形式,自行选择
		2,$banner->hidden(['要隐藏的字段']);   //隐藏字段；
		3,$banner-visible(['只显示的字段'])；  //只显示的字段；
11，全局变量使用
		extra  目录中的内容自动加载 
				return [ '定义的名'=>'定义的内容' ]
		
		使用获取变量：  $name=config('setting.定义的名')

12，读取器，获取器
		public function getURL(读取的字段名，首字母大写)Attr($value,$data){
					$value  字段内容
					$data   当前表中的内容
		} 
13，config 中将是否匹配全部路由打开true，路由定义将依次匹配所有的路由		
14，查询返回具体个数，排序
	self::limit($count)->order('time desc')->select();
	self::limit(参数)->order('字段名 排序顺序')->select();
15，模型请求返回数组
	在databases文件中寻找数据集返回类型
	resultset_type      改为  collection

16，